# coding: utf-8
# Copyright (c) Scanlon Materials Theory Group
# Distributed under the terms of the MIT License.

"""
Module containing class for generating k-points along paths from the Latimer & Munro
method, as implemented in pymatgen.
"""

from sumo.symmetry import Kpath

from pymatgen.symmetry.bandstructure import HighSymmKpath


class LatimerKpath(Kpath):
    r"""Class to generate k-points along paths from the Latimer & Munro
    method, as implemented in pymatgen.
    More detail on the paths generated by can be found in the pymatgen
    documentation. These paths are based on the work described in reference
    [lm]_.
    .. [lm] Munro, J.M., Latimer, K., Horton, M.K. et al. 
    An improved symmetry-based approach to reciprocal space path selection 
    in band structure calculations. 
    npj Comput Mater 6, 112 (2020). 
    DOI: https://doi.org/10.1038/s41524-020-00383-7
    
    These paths should be used with primitive structures that comply with the
    definition from the paper. This structure can be accessed using the
    ``prim`` attribute and compliance between the provided structure and
    standardised structure checked using the ``correct_structure()`` method.
    Args:
        structure (:obj:`~pymatgen.core.structure.Structure`): The structure.
        symprec (:obj:`float`, optional): The tolerance for determining the
            crystal symmetry.
    Attributes:
        prim (:obj:`~pymatgen.core.structure.Structure`): The standardised
            primitive cell structure for the generated k-point path.
        conv (:obj:`~pymatgen.core.structure.Structure`): The standardised
            conventional cell structure.
    """

    def __init__(self, structure, symprec=1e-3):
        Kpath.__init__(self, structure, symprec=symprec)
        pmg_path = HighSymmKpath(self.prim, symprec=symprec, path_type="lm")
        self._kpath = pmg_path._kpath
